/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package data.services.code.challenge;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * This class is Server to listen on Client Connections
 * @author prgundu
 * 
 */
public class DataServicesServer {
    
    ServerSocket serverSocket;
    ExecutorService executorServiceProducer = Executors.newFixedThreadPool(5);
	Socket clientSocket;
	
	/**
	 * 
	 * @param port
	 * @param outputFileName
	 */
    public DataServicesServer(int port, BlockingQueue<String> queue, String outputFileName) 
    { 
        // starts a server and waits for a connection 
    	File file = new File(outputFileName);
    	if (file.exists()) file.delete();
        try
        { 
        	System.out.println("Server started"); 
        	serverSocket = new ServerSocket(port);
        	new Thread(new NumbersConsumer(queue, outputFileName)).start();
        	while (true) {
        		executorServiceProducer.execute(new NumbersProcessor(serverSocket.accept(), queue));
        	} 
        	
        }
        catch(Exception exception) 
        { 
        	exception.printStackTrace();
        }
        finally {
        	try {
				serverSocket.close();
			} catch (IOException ioException) {
				ioException.printStackTrace();
			}
        }
    } 
    
    /**
     * main method
     * @param args
     */
    public static void main(String args[]) 
    { 
//        new DataServicesServer(4000, "C:/output/numbers.log");
    	BlockingQueue<String> queue = new ArrayBlockingQueue<String>(2000000);
        new DataServicesServer(4000, queue, args[0]);
    }

}
